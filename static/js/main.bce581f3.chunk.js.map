{"version":3,"sources":["photo-of-mountains-during-sunset.jpg","components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","props","react_default","a","createElement","type","value","onChange","change","placeholder","Result","_props$weather","weather","date","city","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","Fragment","style","textTransform","className","concat","App","state","handleInputChange","e","_this","setState","target","prevProps","prevState","_this2","this","length","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","backgroundImage","require","components_Form","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bce581f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/photo-of-mountains-during-sunset.0086c404.jpg\";","import React from \"react\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={props.change}\r\n        placeholder=\"Wpisz miasto\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./Result.css\";\r\n\r\nconst Result = (props) => {\r\n  const {\r\n    date,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    pressure,\r\n    wind,\r\n    err,\r\n  } = props.weather;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n    content = (\r\n      <>\r\n        <h3>\r\n          Wyniki wyszukiwania dla{\" \"}\r\n          <em\r\n            style={{\r\n              textTransform: \"capitalize\",\r\n            }}>\r\n            {city}\r\n          </em>\r\n        </h3>\r\n        <h4>Dane dla dnia i godziny: {date}</h4>\r\n        <h4>Aktualna temperatura: {temp} &#176;C</h4>\r\n        <h4>Wschód słońca dzisiaj o {sunriseTime}</h4>\r\n        <h4>Zachód słońca dzisiaj o {sunsetTime}</h4>\r\n        <h4>Aktualna siła wiatru {wind} m/s</h4>\r\n        <h4>Aktualna ciśnienie {pressure} hPa</h4>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"result\">{err ? `Nie mamy w bazie ${city}` : content}</div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nimport \"./App.css\";\n\n// Klucz do API\nconst APIKey = \"efa2ef11f117f7485b2fca8e87a3a2f5\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    err: false,\n  };\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.value.length === 0) return;\n    if (prevState.value !== this.state.value) {\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${\n        this.state.value\n      }&APPID=${APIKey}&units=metric`;\n\n      fetch(API)\n        .then((response) => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error(\"Nie udało się\");\n        })\n        .then((response) => response.json())\n        .then((data) => {\n          const time = new Date().toLocaleString();\n          this.setState((state) => ({\n            err: false,\n            date: time,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            city: state.value,\n          }));\n        })\n        .catch((err) => {\n          this.setState((prevState) => ({\n            err: true,\n            city: prevState.value,\n          }));\n        });\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className=\"App\"\n        style={{\n          backgroundImage:\n            \"url(\" + require(\"../photo-of-mountains-during-sunset.jpg\") + \")\",\n        }}>\n        <Form value={this.state.value} change={this.handleInputChange} />{\" \"}\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}